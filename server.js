// Generated by CoffeeScript 2.5.1
(function() {
  // Dependencies
  var Card, Player, app, createNewDeck, deck, express, http, io, path, players, server, shuffle, socketIO;

  express = require('express');

  http = require('http');

  path = require('path');

  socketIO = require('socket.io');

  app = express();

  server = http.Server(app);

  io = socketIO(server);

  app.set('port', 5000);

  app.use('/public', express.static(__dirname + '/public'));

  // Routing
  app.get('/', function(request, response) {
    response.sendFile(path.join(__dirname, 'index.html'));
  });

  // Starts the server.
  server.listen(5000, function() {
    console.log('Starting server on port 5000');
  });

  Card = class Card {
    constructor(color1, type) {
      this.color = color1;
      this.type = type;
      if (this.color === 'red' || this.color === 'green' || this.color === 'yellow' || this.color === 'blue') {
        this.id = this.color + "_" + this.type;
        this.name = this.color + " " + this.type;
      } else {
        this.id = this.type;
        this.name = this.type;
      }
    }

  };

  Player = (function() {
    var giveCards;

    class Player {
      constructor() {
        ({
          hand: []
        });
      }

    };

    giveCards = function(targetID, quantity, source) {
      players[targetID].this.hand = source.slice(0, quantity);
      source = source.slice(quantity);
    };

    return Player;

  }).call(this);

  // Shuffle function
  shuffle = function(array) {
    var currentIndex, randomIndex, temporaryValue;
    currentIndex = array.length;
    temporaryValue = void 0;
    randomIndex = void 0;
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
      // Pick a remaining element...
      randomIndex = Math.floor(Math.random() * currentIndex);
      currentIndex -= 1;
      // And swap it with the current element.
      temporaryValue = array[currentIndex];
      array[currentIndex] = array[randomIndex];
      array[randomIndex] = temporaryValue;
    }
    return array;
  };

  // Variables
  deck = [];

  // Create new deck
  createNewDeck = function() {
    var card, color, colors, count, i, j, len, len1, specials;
    deck = [];
    colors = ['red', 'green', 'yellow', 'blue'];
    specials = ['reverse', 'reverse', 'skip', 'skip', '+2', '+2'];
    for (i = 0, len = colors.length; i < len; i++) {
      color = colors[i];
      // Number Cards (with 0)
      count = 0;
      while (count <= 9) {
        deck.push(new Card(color, count));
        count++;
      }
      // Number Cards (without 0)
      count = 1;
      while (count <= 9) {
        deck.push(new Card(color, count));
        count++;
      }
// Color special cards
      for (j = 0, len1 = specials.length; j < len1; j++) {
        card = specials[j];
        deck.push(new Card(color, card));
        count++;
      }
    }
    // Wildcardsdeck
    count = 1;
    while (count <= 4) {
      deck.push(new Card(false, 'wildcard'));
      count++;
    }
    // +4 Cards
    count = 1;
    while (count <= 4) {
      deck.push(new Card(false, '+4'));
      count++;
    }
    shuffle(deck);
  };

  //giveCards = (target, source, quantity) ->
  //  target = deck.slice 0, quantity
  //  source = source.slice quantity
  //  return
  players = {};

  io.on('connection', function(socket) {
    //add connected clients to players
    socket.on('new player', function() {
      players[socket.id] = new Player();
      console.log('new player connected to socket ' + socket.id);
      return console.log(players);
    });
    //remove disconnected clients from players
    socket.on('disconnect', function() {
      delete players[socket.id];
      return console.log('player disconnected from socket ' + socket.id);
    });
    return socket.on('new game', function() {
      console.log('starting new game');
      createNewDeck;
      console.log(deck);
      io.sockets.emit('state', deck);
    });
  });

  //    players[socket.id].giveCards(7, deck)
//    console.log players
//    for player in players
//    io.sockets.emit 'state', players[socket.id].hand
/*
var players = {};
io.on('connection', function(socket) {
    socket.on('new player', function() {
        players[socket.id] = {
            x: 300,
            y: 300
        };
    });
    socket.on('movement', function(data) {
        var player = players[socket.id] || {};
        if (data.left) {
            player.x -= 5;
        }
        if (data.up) {
            player.y -= 5;
        }
        if (data.right) {
            player.x += 5;
        }
        if (data.down) {
            player.y += 5;
        }
    });
});

setInterval(function() {
    io.sockets.emit('state', players);
}, 1000 / 60);
*/

}).call(this);
